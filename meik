#!/usr/bin/env -S bash -euo pipefail -O extglob
set -x;

function task_start_msg() {
	echo -e "\n${1} ...\n";
}
function task_successful_msg() {
	echo -e "\n${1}\n";
}
function task_fail_msg() {
	echo -e "\nERROR: ${1}\n";
}

function check_docker_installed() {
	if command -v docker > /dev/null ; then
		return
	fi
	if docker --version > /dev/null ; then
		return
	fi
	task_fail_msg "no Docker installed";
	exit 1;
}

function assert_compose_override_yml_exists() {
	if [[ ! -f "docker/.env" ]] ; then
		task_fail_msg "docker/.env is missing"
		exit 1;
	fi
	touch "${REPO_DIR}/docker/compose.${compose_profile_file}.override.yml";
}

function docker_compose() {
	docker compose \
		--profile "${MEIK_DEPLOYMENT_PROFILE}" \
		-f "${REPO_DIR}/docker/compose.yml" \
		-f "${REPO_DIR}/docker/compose.${compose_profile_file}.yml" \
		-f "${REPO_DIR}/docker/compose.${compose_profile_file}.override.yml" \
		"$@";
}

function docker_compose_run() {
	docker_compose run --rm --entrypoint '' "$@";
}
function docker_compose_run_entrypoint() {
	docker_compose run --rm "$@" 'true';
}
function bashapp() {
	docker_compose_run --user normal app bash -c "$@";
}
function php() {
	docker_compose_run --user normal app php "$@";
}
function composer() {
	docker_compose_run --user normal app composer "$@";
}
function artisan() {
	php artisan "$@";
}
function npm() {
	docker_compose_run --user normal node npm "$@";
}

function deploy_prod() {
	task_start_msg "deploying prod"
	
	assert_compose_override_yml_exists;
	cp --force .env.prod.dist .env;
	docker_compose build --pull;
	docker_compose_run_entrypoint app;
	composer install;
	docker_compose up -d --wait --force-recreate --remove-orphans db mariadb;
	artisan optimize:clear; # Cache u.a. für .env löschen, braucht db
	artisan key:generate --force;
	artisan ziggy:generate --types resources/js/ziggy/ziggy.js;
	npm ci;
	npm run prod-build;
	
	artisan migrate --force;
	
	artisan db:seed --force; # TODO RAUS!
	
	artisan optimize; #(Config, Event-Listener-Mapping, Routes cachen)
	docker_compose up -d --wait --force-recreate --remove-orphans web app # mit php-fpm
	
	task_successful_msg "deploying prod successful";
	exit 0;
}

function deploy_prod_ssr() {
	echo "Deployment Profile prod-ssr is not yet implemented";
	exit 1;
}

function down() {
	task_start_msg "tearing down";
	docker_compose down;
	task_successful_msg "tearing down successful";
	exit 0;
}

function get_global_vars() {
	REPO_DIR="$(dirname -- "$( readlink -f -- "$0"; )")";
	MEIK_DEPLOYMENT_PROFILE="${MEIK_DEPLOYMENT_PROFILE:-prod}";
}

function main() {
	check_docker_installed;
	get_global_vars;
	
	if [[ "$MEIK_DEPLOYMENT_PROFILE" = 'prod' ]] ; then
		compose_profile_file="prod"
	elif [[ "$MEIK_DEPLOYMENT_PROFILE" = 'prod-ssr' ]] ; then
		compose_profile_file="prod-ssr"
	else
		echo "Env-Var MEIK_DEPLOYMENT_PROFILE has invalid value '$MEIK_DEPLOYMENT_PROFILE'.";
		exit 1;
	fi
	
	if [[ ! -n "$1" ]] ; then
		echo "No action specificed";
		exit 0;
	elif [[ "$1" = "up" ]] ; then
		if [[ "$MEIK_DEPLOYMENT_PROFILE" = "prod-ssr" ]] ; then
			deploy_prod_ssr;
		else
			deploy_prod;
		fi
	elif [[ "$1" = "down" ]] ; then
		down;
	fi
	
	echo "assertation failed: indeed fall through";
	exit 2;
}

main "$@";
